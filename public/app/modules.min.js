
	


	angular.module('rk.shared', [
		'btford.socket-io'
	]);




    angular.module('rk.shared')

        .constant('Configs', {
            

            contentType: 'application/json',
            accessCookie: 'pw.user.auth',

            headers: {
                authorization: 'Authorization'
            },

            baseUrl: /*<!--BaseUrl>*/ 'http://localhost:3001' /*<--BaseUrl>*/,

            apis: {


            }        
        });

	
    angular.module('rk.shared')

		.config(['$stateProvider', '$urlRouterProvider', '$locationProvider',

	        function ($stateProvider, $urlRouterProvider, $locationProvider) {

	            $stateProvider

	                .state('base', {
	                    abstract: true,
	                    views: {
	                        'header@': {
	                            templateUrl: 'app/shared/templates/header.html',
	                            controller: 'HeaderCtrl'
	                        },
	                        'footer@': {
	                            templateUrl: 'app/shared/templates/footer.html',
	                            controller: 'FooterCtrl'
	                        }
	                    }
	                })	           

	                .state('base.home', {
	                    url: '/home',
	                    views: {
	                        'main@': {
	                            templateUrl: 'app/home/templates/home.html',
	                            controller: 'HomeCtrl'
	                        }
	                    }
	                })
	                ;

	            $urlRouterProvider.otherwise('/home');
	            $locationProvider.hashPrefix('!');
	        }
	    ]);

	
    angular.module('rk.shared')

	    .factory('interceptor', ['$rootScope', '$q', '$injector',

	        function ($rootScope, $q, $injector) {

	            return {

	                request: function (config) {

	                	
	                    return config || $q.when(config);                   
	                }
	            };
	        }
	    ])

		.config(['$httpProvider',

	        function($httpProvider) {

	            $httpProvider.interceptors.push('interceptor');
	            $httpProvider.defaults.useXDomain = true;
			}
		]);


	angular.module('rk.shared')

		.factory('Utils', ['$rootScope', '$injector', 

			function ($rootScope, $injector) {

				var $log = $injector.get('$log');
				var $modal = $injector.get('$modal');
				var $state = $injector.get('$state');
				var $filter = $injector.get('$filter');
				var $timeout = $injector.get('$timeout');				
				var Configs = $injector.get('Configs');




				var Utils = {



                    /* ---------------------- <Utilities Methods> ---------------------- */
					
					showLoading: function () {

					},

					hideLoading: function () {

					},					

					showAlert: function (alertType, messageKey) {

						if ( alertType == 'success' ) {
							this.showSuccess(messageKey);
						} 

						else if ( alertType == 'error' ) {
							this.showError(messageKey);
						} 

						else if ( alertType == 'warning' ) {
							this.showWarning(messageKey);
						} 

						else  {
							this.showInfo(messageKey);
						}
					},

					showSuccess: function (messageKey) {

					},

					showWarning: function (messageKey) {

					},

					showError: function (messageKey, errorRef) {

					},

					showInfo: function (messageKey) {

					},


					hideAlert: function () {

					},





					logs: {

						log: function (string) {
							$log.log(string);
						},

						info: function (string) {
							$log.info(string);
						},

						warn: function (string) {
							$log.warn(string);
						},

						error: function (string) {
							$log.error(string);
						},

						debug: function (string) {
							$log.debug(string);
						}
					},




					scrollTo: function (element) {

						if ( jQuery('#' + element).length === 1 ) {

							jQuery('html, body').animate({
								scrollTop:  jQuery('#' + element).position().top
							}, 1500);
						};
					},


                    /* ---------------------- <BaseUrl> ---------------------- */

					getBaseUrl: function () {
						return Configs.baseUrl;
					},



                    /* ---------------------- < Urls> ---------------------- */


                    getRegisterForEventUrl: function () {
                    	return this.getBaseUrl() + Configs.apis.registerForEvent.url;
                    },





                    /* ---------------------- <Jump To Pages> ---------------------- */

					gotoHomePage: function () {
						$state.go('base.home');
					},





                    /* ---------------------- <Other Methods> ---------------------- */


                    trustSrc: function (src) {
						return $injector.get('$sce').trustAsResourceUrl(src);
                    },








                    /* ---------------------- <Formatters> ---------------------- */





                    /* ---------------------- <Error Handling> ---------------------- */

                    handleErrors: function (errorData) {

                    	
                    }


				};

				return Utils;
			}
		]);


	angular.module('rk.shared')

		.factory('RestConfig', ['$rootScope', 'RESTSvc', 

			function($rootScope, RESTSvc) {

				var RestConfig = {

				
				
				};

				return RestConfig;
			}
		]);

	
	angular.module('rk.shared')

		.factory('RESTSvc', ['$rootScope', '$q', '$http', 'Utils',

			function ($rootScope, $q, $http, Utils) {

				return {

					get: function( url, data ) {

						var deferred = $q.defer();

						$http.get(
							url,
							data
						).success(function (data, status, headers, config) {
							deferred.resolve({
								data: data,
								status: status,
								headers: headers,
								config: config
							});
						}).error(function (data, status, headers, config) {

							var errorOb = {
								data: data,
								status: status,
								headers: headers,
								config: config
							};

							Utils.hideLoading();
		            		Utils.handleErrors(errorOb);
							deferred.reject(errorOb);
						});

						return deferred.promise;
					},


					post: function( url, data ) {

						var deferred = $q.defer();

						$http.post(
							url,
							data
						).success(function (data, status, headers, config) {
							deferred.resolve({
								data: data,
								status: status,
								headers: headers,
								config: config
							});
						}).error(function (data, status, headers, config) {

							var errorOb = {
								data: data,
								status: status,
								headers: headers,
								config: config
							};

							Utils.hideLoading();
		            		Utils.handleErrors(errorOb);
							deferred.reject(errorOb);
						});
						
						return deferred.promise;
					},


					put: function( url, data ) {

						var deferred = $q.defer();

						$http.put(
							url,
							data
						).success(function (data, status, headers, config) {
							deferred.resolve({
								data: data,
								status: status,
								headers: headers,
								config: config
							});
						}).error(function (data, status, headers, config) {

							var errorOb = {
								data: data,
								status: status,
								headers: headers,
								config: config
							};

							Utils.hideLoading();
		            		Utils.handleErrors(errorOb);
							deferred.reject(errorOb);
						});
						
						return deferred.promise;
					},

					delete: function( url, data ) {

						var deferred = $q.defer();

						$http.delete(
							url,
							data
						).success(function (data, status, headers, config) {
							deferred.resolve({
								data: data,
								status: status,
								headers: headers,
								config: config
							});
						}).error(function (data, status, headers, config) {

							var errorOb = {
								data: data,
								status: status,
								headers: headers,
								config: config
							};

							Utils.hideLoading();
		            		Utils.handleErrors(errorOb);
							deferred.reject(errorOb);
						});
						
						return deferred.promise;
					}
				};
			}
		]);

	
	angular.module('rk.shared')

		.factory('SocketSvc', ['$rootScope', '$injector',

			function ($rootScope, $injector) {

				var socketFactory = $injector.get('socketFactory');

				var socket = io.connect('localhost:3000');

				var SocketSvc = {

					on: function (eventName, callback) {

						socket.on(eventName, function () {  
							var args = arguments;
							$rootScope.$apply(function () {
								callback.apply(socket, args);
							});
						});
					},

					emit: function (eventName, data, callback) {

						socket.emit(eventName, data, function () {
							var args = arguments;
							$rootScope.$apply(function () {
								if (callback) {
									callback.apply(socket, args);
								}
							});
						})
					}
				};

				return SocketSvc;
			}
		]);

	
	angular.module('rk.shared')

		.factory('NotificationSvc', ['$rootScope', '$injector',

			function ($rootScope, $injector) {

				var SocketSvc = $injector.get('SocketSvc');

				var NotificationSvc = {

					getNotifications: function () {

						SocketSvc.on('notifications:get', function (notificationsData) {
							$rootScope.$broadcast('notifications:updated', notificationsData);
						});
					},

					saveNotification: function (notificationOb) {

						SocketSvc.emit('notifications:save', notificationOb, function (notifcationResponse) {
							$rootScope.$broadcast('notifications:updated', notifcationResponse);
						});
					},
				};

				return NotificationSvc;
			}
		]);



	angular.module('rk.shared')

		.directive('autoscroll', ['$rootScope', 

			function ($rootScope) {  

				return function(scope, element, attrs) {

					var pos = element[0].parentNode.scrollHeight;

					jQuery(element).parent().stop().animate({
						scrollTop : pos
					}, 100);
				}
			}
		]);



	angular.module('rk.shared')

	    .controller('HeaderCtrl', ['$rootScope', '$scope', '$injector',

	        function ($rootScope, $scope, $injector) {

	        	var Utils = $injector.get('Utils');
	        	var $state = $injector.get('$state');




	        



				$scope.navbarCollapsed = true;

            	$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
                    $scope.navbarCollapsed = true;
                });
	        }
	    ]);



	angular.module('rk.shared')

	    .controller('FooterCtrl', ['$rootScope', '$scope', '$injector', 

			function ($rootScope, $scope, $injector) {




			}
	    ]);


	angular.module('rk.home', [
		
	]);



	angular.module('rk.home')

	    .controller('HomeCtrl', ['$rootScope', '$scope', '$injector',

	        function ($rootScope, $scope, $injector) {
	        	
	        	var Utils = $injector.get('Utils');
	        	var SocketSvc = $injector.get('SocketSvc');


	    		$scope.chat = {

	    			message: '',
	    			messages: []
	    		};


	    		$scope.getMessages = function () {

	    			SocketSvc.emit('messages:get', {
	    				userId: $scope.me.userId
	    			});
	    		};



	    		$scope.sendMessage = function (chatOb) {

	    			var chatMessage = {
	    				message: chatOb.message,
	    				sender: $scope.me.userId,
	    				receiver: $scope.you.userId
	    			};

	    			SocketSvc.emit('message:send', chatMessage);

	    			chatOb.message = '';
	    		};



	    		SocketSvc.on('messages:updated', function (chatMessages) {
					$scope.chat.messages = chatMessages[0];
				});

	    		SocketSvc.on('chat:updated', function (chat) {
					//$scope.chat.messages.push(chat.message);
					$scope.getMessages();
				});




	    		$scope.users = {

	    			me: {
	    				userId: '554e1ed2e319f6fc89c55cd4'
	    			},

	    			you: {
	    				userId: '554e1eeae319f6fc89c55cd5'
	    			}
	    		};

	    		$scope.me = $scope.users.me;
	    		$scope.you = $scope.users.you;


	    		$scope.selectMe = function () {
		    		$scope.me = $scope.users.me;
		    		$scope.you = $scope.users.you;
	    		};

	    		$scope.selectYou = function () {
		    		$scope.me = $scope.users.you;
		    		$scope.you = $scope.users.me;
	    		};



				
				$scope.init = function () {
					$scope.getMessages();
				};

				$scope.init ();


	        }
	    ]);




    angular.element(document).ready(function() {

        angular.bootstrap(document, [
            'chat',  
        ]);
    });


    angular.module('chat', [

        'ui.router',
        'ui.bootstrap',
        'ngSanitize',

        'rk.shared',

        'rk.home'
    ])

    .run(['$rootScope', '$injector',

        function ($rootScope, $injector) {

            
        }
    ]);



angular.module('chat').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('app/home/templates/home.html',
    "\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t<section id=\"home\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t<div class=\"container full\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t<div class=\"row\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t<div class=\"col-sm-12\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t<div class=\"form-group\">\r" +
    "\n" +
    "\t\t\t\t\t\t<div class=\"btn-group\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t<button class=\"btn btn-primary\" ng-click=\"selectMe()\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t<span>Me</span>\r" +
    "\n" +
    "\t\t\t\t\t\t\t</button>\r" +
    "\n" +
    "\t\t\t\t\t\t\t<button class=\"btn btn-primary\" ng-click=\"selectYou()\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t<span>You</span>\r" +
    "\n" +
    "\t\t\t\t\t\t\t</button>\r" +
    "\n" +
    "\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t<div class=\"row\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t<div class=\"col-sm-6 col-sm-offset-3\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t<div class=\"panel\" style=\"margin: 100px auto;\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t<div class=\"panel-body\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t<div class=\"well\" style=\"min-height: 150px; max-height: 400px; overflow:auto;\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t<p autoscroll ng-repeat=\"chat in chat.messages track by $index\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t<span ng-bind=\"chat.message\"></span>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t</p>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t<p ng-if=\"!chat.messages.length\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"text-muted\">Why don't you say hello ?</span>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t</p>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t<div class=\"clearfix\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t<form class=\"form\" ng-submit=\"sendMessage(chat)\">\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"input-group\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Message\" ng-model=\"chat.message\" autofocus />\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"input-group-btn\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\">\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"fa fa-send\"></span>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t\t</form>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t\t</div>\r" +
    "\n" +
    "\r" +
    "\n" +
    "\t</section>"
  );


  $templateCache.put('app/shared/templates/footer.html',
    "\n" +
    "\n" +
    "\t<footer id=\"footer\">\n" +
    "\t\t<section class=\"footer-wrapper\">\n" +
    "\t\t  \t<div class=\"container full\">\n" +
    "\t\t    \t<div class=\"row\">\n" +
    "\t\t      \t\t<div class=\"col-sm-12\">\n" +
    "\t\t      \t\t\n" +
    "\t\t      \t\t</div>\n" +
    "\t\t    \t</div>\n" +
    "\t\t  \t</div>\n" +
    "\t\t</section>\n" +
    "\t</footer>"
  );


  $templateCache.put('app/shared/templates/header.html',
    "\n" +
    "\n" +
    "\n" +
    "\t<header id=\"header\">\n" +
    "\t  \t<div class=\"container full\">\n" +
    "\t    \t<div class=\"row\">\n" +
    "\t    \t\t<div class=\"col-sm-12 center-sm\">\n" +
    "\t    \t\t\n" +
    "\t    \t\t</div>\n" +
    "\t    \t</div>\n" +
    "\t  \t</div>\n" +
    "\t</header>"
  );

}]);
